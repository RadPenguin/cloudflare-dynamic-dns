#!/bin/bash

script_dir=$(dirname "$(readlink -f "$0")")
env_file=${CF_ENV_FILE:-$script_dir/.env}

force_update=0
if [[ "$1" == "--force" ]]; then
  force_update=1
fi

function cf() {
  local method=$1
  local url=$2
  local data_file=${3:-}
  local response=""
  local options=""

  if [[ -e "$data_file" ]]; then
    if ! jq -e . "$data_file" >/dev/null 2>&1; then
      echo "!! Invalid JSON: $(cat "$data_file")"
      exit 1
    fi

    options="--data @$data_file"
  fi

  # shellcheck disable=SC2086
  response=$(curl --silent \
    -X "$method" \
    "https://api.cloudflare.com/client/v4/$url" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $CF_TOKEN" \
    $options)

  if [[ $(echo "$response" | jq -r .success) != "true" ]]; then
    echo "$response" | jq .errors
    exit 1
  fi

  echo "$response" | jq -r .result
}

is_first_run=0
if [[ ! -e "$env_file" ]]; then
  is_first_run=1
fi

set -o allexport
# shellcheck source=.env
source "$env_file"
(
  tee "$env_file" <<EOF
# Auto-generated by $( realpath "$0" )
CF_RECORD=${CF_RECORD:-test.example.com}
CF_RECORD_ID="${CF_RECORD_ID:-}"
CF_RECORD_PROXIED=${CF_RECORD_PROXIED:-false}
CF_RECORD_TTL=${CF_RECORD_TTL:-60}
CF_RECORD_TYPE=${CF_RECORD_TYPE:-A}
CF_TOKEN=${CF_TOKEN:-abcd1234}
CF_ZONE=${CF_ZONE:-example.com}
CF_ZONE_ID="${CF_ZONE_ID:-}"
IP_ADDRESS_SOURCE=${IP_ADDRESS_SOURCE:-https://ifconfig.me/}
PUBLIC_IP_ADDRESS=${PUBLIC_IP_ADDRESS:-}
EOF
) >/dev/null

if [[ $is_first_run -eq 1 ]]; then
  echo "* $env_file created!"
  echo "* Please update your env file by following these instructions: https://github.com/RadPenguin/cloudflare-dynamic-dns/#setup "
  exit 1
fi

# shellcheck source=.env
source "$env_file"
set +o allexport

current_ip=$(curl --silent "$IP_ADDRESS_SOURCE")
if [[ $force_update -eq 0 ]] && [[ "$current_ip" = "$PUBLIC_IP_ADDRESS" ]]; then
  echo "* Public IP address unchanged, exiting."
  exit 0
fi
PUBLIC_IP_ADDRESS=$current_ip

# Create the record JSON file.
json_file=$(mktemp)
(tee "$json_file" <<EOF
{
  "type": "$CF_RECORD_TYPE",
  "name": "$CF_RECORD",
  "content": "$PUBLIC_IP_ADDRESS",
  "ttl": $CF_RECORD_TTL,
  "proxied": $CF_RECORD_PROXIED
}
EOF
) > /dev/null

if [[ -z $CF_ZONE_ID ]] || [[ ${#CF_ZONE_ID} -ne 32 ]]; then
  echo -n "* Retrieving the Zone ID for $CF_ZONE: "
  CF_ZONE_ID=$(cf GET "zones?name=$CF_ZONE" | jq -r .[0].id 2>/dev/null)
  echo "$CF_ZONE_ID"

  echo "CF_ZONE_ID=$CF_ZONE_ID" >>"$env_file"
fi

if [[ -z $CF_RECORD_ID ]] || [[ ${#CF_RECORD_ID} -ne 32 ]]; then
  echo -n "* Retrieving the Record ID for $CF_RECORD: "
  CF_RECORD_ID=$(cf GET "zones/$CF_ZONE_ID/dns_records?name=$CF_RECORD" | jq -r .[0].id 2>/dev/null)
  if [[ "$CF_RECORD_ID" = "null" ]]; then
    echo "Not found!"
    echo -n "* Creating the Record for $CF_RECORD: "
    CF_RECORD_ID=$( cf POST "zones/$CF_ZONE_ID/dns_records" "$json_file" | jq -r .id )
  fi

  echo "$CF_RECORD_ID"
  echo "CF_RECORD_ID=$CF_RECORD_ID" >>"$env_file"
fi

echo -n "* Pointing $CF_RECORD to $PUBLIC_IP_ADDRESS: "
cf PUT "zones/$CF_ZONE_ID/dns_records/$CF_RECORD_ID" "$json_file" 1> /dev/null
echo "Success!"

# Update the PUBLIC_IP_ADDRESS.
echo "PUBLIC_IP_ADDRESS=$PUBLIC_IP_ADDRESS" >>"$env_file"

# Cleanup.
rm -f "$json_file"
